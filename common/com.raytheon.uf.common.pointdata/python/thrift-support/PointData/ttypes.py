##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
##
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

import struct

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class com_raytheon_uf_common_pointdata_ParameterDescription:
  """
  Attributes:
   - dimension
   - dimensionAsInt
   - fillValue
   - maxLength
   - numDims
   - parameterName
   - unit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dimension', None, None, ), # 1
    (2, TType.I32, 'dimensionAsInt', None, None, ), # 2
    (3, TType.DOUBLE, 'fillValue', None, None, ), # 3
    (4, TType.I32, 'maxLength', None, None, ), # 4
    (5, TType.I32, 'numDims', None, None, ), # 5
    (6, TType.STRING, 'parameterName', None, None, ), # 6
    (7, TType.STRING, 'unit', None, None, ), # 7
  )

  def __init__(self, dimension=None, dimensionAsInt=None, fillValue=None, maxLength=None, numDims=None, parameterName=None, unit=None,):
    self.dimension = dimension
    self.dimensionAsInt = dimensionAsInt
    self.fillValue = fillValue
    self.maxLength = maxLength
    self.numDims = numDims
    self.parameterName = parameterName
    self.unit = unit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dimension = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dimensionAsInt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fillValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.maxLength = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.numDims = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.parameterName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.unit = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_ParameterDescription')
    if self.dimension != None:
      oprot.writeFieldBegin('dimension', TType.STRING, 1)
      oprot.writeString(self.dimension)
      oprot.writeFieldEnd()
    if self.dimensionAsInt != None:
      oprot.writeFieldBegin('dimensionAsInt', TType.I32, 2)
      oprot.writeI32(self.dimensionAsInt)
      oprot.writeFieldEnd()
    if self.fillValue != None:
      oprot.writeFieldBegin('fillValue', TType.DOUBLE, 3)
      oprot.writeDouble(self.fillValue)
      oprot.writeFieldEnd()
    if self.maxLength != None:
      oprot.writeFieldBegin('maxLength', TType.I32, 4)
      oprot.writeI32(self.maxLength)
      oprot.writeFieldEnd()
    if self.numDims != None:
      oprot.writeFieldBegin('numDims', TType.I32, 5)
      oprot.writeI32(self.numDims)
      oprot.writeFieldEnd()
    if self.parameterName != None:
      oprot.writeFieldBegin('parameterName', TType.STRING, 6)
      oprot.writeString(self.parameterName)
      oprot.writeFieldEnd()
    if self.unit != None:
      oprot.writeFieldBegin('unit', TType.STRING, 7)
      oprot.writeString(self.unit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_elements_StringPointDataObject:
  """
  Attributes:
   - description
   - dimensions
   - stringData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'description', (com_raytheon_uf_common_pointdata_ParameterDescription, com_raytheon_uf_common_pointdata_ParameterDescription.thrift_spec), None, ), # 1
    (2, TType.I32, 'dimensions', None, None, ), # 2
    (3, TType.LIST, 'stringData', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, description=None, dimensions=None, stringData=None,):
    self.description = description
    self.dimensions = dimensions
    self.stringData = stringData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.description = com_raytheon_uf_common_pointdata_ParameterDescription()
          self.description.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dimensions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.stringData = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.stringData.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_elements_StringPointDataObject')
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRUCT, 1)
      self.description.write(oprot)
      oprot.writeFieldEnd()
    if self.dimensions != None:
      oprot.writeFieldBegin('dimensions', TType.I32, 2)
      oprot.writeI32(self.dimensions)
      oprot.writeFieldEnd()
    if self.stringData != None:
      oprot.writeFieldBegin('stringData', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.stringData))
      for iter6 in self.stringData:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_elements_FloatPointDataObject:
  """
  Attributes:
   - description
   - dimensions
   - floatData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'description', (com_raytheon_uf_common_pointdata_ParameterDescription, com_raytheon_uf_common_pointdata_ParameterDescription.thrift_spec), None, ), # 1
    (2, TType.I32, 'dimensions', None, None, ), # 2
    (3, TType.LIST, 'floatData', (TType.I32,None), None, ), # 3
  )

  def __init__(self, description=None, dimensions=None, floatData=None,):
    self.description = description
    self.dimensions = dimensions
    self.floatData = floatData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.description = com_raytheon_uf_common_pointdata_ParameterDescription()
          self.description.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dimensions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.floatData = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            d = iprot.readI32()
            dAsBytes = struct.pack('i', d)
            _elem12 = struct.unpack('f', dAsBytes);
            self.floatData.append(_elem12[0])
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_elements_FloatPointDataObject')
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRUCT, 1)
      self.description.write(oprot)
      oprot.writeFieldEnd()
    if self.dimensions != None:
      oprot.writeFieldBegin('dimensions', TType.I32, 2)
      oprot.writeI32(self.dimensions)
      oprot.writeFieldEnd()
    if self.floatData != None:
      oprot.writeFieldBegin('floatData', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.floatData))
      for iter13 in self.floatData:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_elements_IntPointDataObject:
  """
  Attributes:
   - description
   - dimensions
   - intData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'description', (com_raytheon_uf_common_pointdata_ParameterDescription, com_raytheon_uf_common_pointdata_ParameterDescription.thrift_spec), None, ), # 1
    (2, TType.I32, 'dimensions', None, None, ), # 2
    (3, TType.LIST, 'intData', (TType.I32,None), None, ), # 3
  )

  def __init__(self, description=None, dimensions=None, intData=None,):
    self.description = description
    self.dimensions = dimensions
    self.intData = intData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.description = com_raytheon_uf_common_pointdata_ParameterDescription()
          self.description.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dimensions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.intData = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.intData.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_elements_IntPointDataObject')
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRUCT, 1)
      self.description.write(oprot)
      oprot.writeFieldEnd()
    if self.dimensions != None:
      oprot.writeFieldBegin('dimensions', TType.I32, 2)
      oprot.writeI32(self.dimensions)
      oprot.writeFieldEnd()
    if self.intData != None:
      oprot.writeFieldBegin('intData', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.intData))
      for iter20 in self.intData:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_elements_LongPointDataObject:
  """
  Attributes:
   - description
   - dimensions
   - longData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'description', (com_raytheon_uf_common_pointdata_ParameterDescription, com_raytheon_uf_common_pointdata_ParameterDescription.thrift_spec), None, ), # 1
    (2, TType.I32, 'dimensions', None, None, ), # 2
    (3, TType.LIST, 'longData', (TType.I64,None), None, ), # 3
  )

  def __init__(self, description=None, dimensions=None, longData=None,):
    self.description = description
    self.dimensions = dimensions
    self.longData = longData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.description = com_raytheon_uf_common_pointdata_ParameterDescription()
          self.description.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dimensions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.longData = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.longData.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_elements_LongPointDataObject')
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRUCT, 1)
      self.description.write(oprot)
      oprot.writeFieldEnd()
    if self.dimensions != None:
      oprot.writeFieldBegin('dimensions', TType.I32, 2)
      oprot.writeI32(self.dimensions)
      oprot.writeFieldEnd()
    if self.longData != None:
      oprot.writeFieldBegin('longData', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.longData))
      for iter27 in self.longData:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_PointDataThriftContainer:
  """
  Attributes:
   - floatData
   - intData
   - longData
   - size
   - stringData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'floatData', (TType.STRUCT,(com_raytheon_uf_common_pointdata_elements_FloatPointDataObject, com_raytheon_uf_common_pointdata_elements_FloatPointDataObject.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'intData', (TType.STRUCT,(com_raytheon_uf_common_pointdata_elements_IntPointDataObject, com_raytheon_uf_common_pointdata_elements_IntPointDataObject.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'longData', (TType.STRUCT,(com_raytheon_uf_common_pointdata_elements_LongPointDataObject, com_raytheon_uf_common_pointdata_elements_LongPointDataObject.thrift_spec)), None, ), # 3
    (4, TType.I32, 'size', None, None, ), # 4
    (5, TType.LIST, 'stringData', (TType.STRUCT,(com_raytheon_uf_common_pointdata_elements_StringPointDataObject, com_raytheon_uf_common_pointdata_elements_StringPointDataObject.thrift_spec)), None, ), # 5
  )

  def __init__(self, floatData=None, intData=None, longData=None, size=None, stringData=None,):
    self.floatData = floatData
    self.intData = intData
    self.longData = longData
    self.size = size
    self.stringData = stringData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      print fname
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.floatData = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = com_raytheon_uf_common_pointdata_elements_FloatPointDataObject()
            _elem33.read(iprot)
            self.floatData.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.intData = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = com_raytheon_uf_common_pointdata_elements_IntPointDataObject()
            _elem39.read(iprot)
            self.intData.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.longData = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = com_raytheon_uf_common_pointdata_elements_LongPointDataObject()
            _elem45.read(iprot)
            self.longData.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.stringData = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = com_raytheon_uf_common_pointdata_elements_StringPointDataObject()
            _elem51.read(iprot)
            self.stringData.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_PointDataThriftContainer')
    if self.floatData != None:
      oprot.writeFieldBegin('floatData', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.floatData))
      for iter52 in self.floatData:
        iter52.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.intData != None:
      oprot.writeFieldBegin('intData', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.intData))
      for iter53 in self.intData:
        iter53.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.longData != None:
      oprot.writeFieldBegin('longData', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.longData))
      for iter54 in self.longData:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.size != None:
      oprot.writeFieldBegin('size', TType.I32, 4)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.stringData != None:
      oprot.writeFieldBegin('stringData', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.stringData))
      for iter55 in self.stringData:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint:
  """
  Attributes:
   - constraintType
   - parameter
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'constraintType', None, None, ), # 1
    (2, TType.STRING, 'parameter', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
  )

  def __init__(self, constraintType=None, parameter=None, value=None,):
    self.constraintType = constraintType
    self.parameter = parameter
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.constraintType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.parameter = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint')
    if self.constraintType != None:
      oprot.writeFieldBegin('constraintType', TType.I32, 1)
      oprot.writeI32(self.constraintType)
      oprot.writeFieldEnd()
    if self.parameter != None:
      oprot.writeFieldBegin('parameter', TType.STRING, 2)
      oprot.writeString(self.parameter)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class com_raytheon_uf_common_pointdata_PointDataRequestMessage:
  """
  Attributes:
   - allLevels
   - constraints
   - levelParameter
   - levelValue
   - parameters
   - pluginName
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'allLevels', None, None, ), # 1
    (2, TType.LIST, 'constraints', (TType.STRUCT,(com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint, com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'levelParameter', None, None, ), # 4
    (4, TType.LIST, 'levelValue', (TType.DOUBLE,None), None, ), # 5
    (5, TType.LIST, 'parameters', (TType.STRING,None), None, ), # 6
    (6, TType.STRING, 'pluginName', None, None, ), # 7
  )

  def __init__(self, allLevels=None, constraints=None, levelParameter=None, levelValue=None, parameters=None, pluginName=None,):
    self.allLevels = allLevels
    self.constraints = constraints
    self.levelParameter = levelParameter
    self.levelValue = levelValue
    self.parameters = parameters
    self.pluginName = pluginName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      print fname
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.allLevels = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.constraints = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint()
            _elem61.read(iprot)
            self.constraints.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.levelParameter = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.levelValue = []
          (_etype71, _size68) = iprot.readListBegin()
          for _i72 in xrange(_size68):
            _elem73 = iprot.readDouble();
            self.levelValue.append(_elem73)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.parameters = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = iprot.readString();
            self.parameters.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.pluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('com_raytheon_uf_common_pointdata_PointDataRequestMessage')
    if self.allLevels != None:
      oprot.writeFieldBegin('allLevels', TType.BOOL, 1)
      oprot.writeBool(self.allLevels)
      oprot.writeFieldEnd()
    if self.constraints != None:
      oprot.writeFieldBegin('constraints', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.constraints))
      for iter80 in self.constraints:
        iter80.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.levelParameter != None:
      oprot.writeFieldBegin('levelParameter', TType.STRING, 4)
      oprot.writeString(self.levelParameter)
      oprot.writeFieldEnd()
    if self.levelValue != None:
      oprot.writeFieldBegin('levelValue', TType.LIST, 5)
      oprot.writeListBegin(TType.DOUBLE, len(self.levelValue))
      for iter82 in self.levelValue:
        oprot.writeDouble(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.parameters != None:
      oprot.writeFieldBegin('parameters', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.parameters))
      for iter83 in self.parameters:
        oprot.writeString(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pluginName != None:
      oprot.writeFieldBegin('pluginName', TType.STRING, 7)
      oprot.writeString(self.pluginName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

