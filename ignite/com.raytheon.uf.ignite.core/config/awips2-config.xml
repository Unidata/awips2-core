<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       ">
    <bean
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName">
           <value>SYSTEM_PROPERTIES_MODE_OVERRIDE</value>
        </property>
        <property name="searchSystemEnvironment">
            <value type="boolean">true</value>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
    </bean>

    <bean id="propsLoaded" class="com.raytheon.uf.ignite.core.IgniteServerPropertiesLoader" factory-method="load" />

    <bean id="sslConfig" class="com.raytheon.uf.common.datastore.ignite.IgniteSslConfiguration">
        <constructor-arg value="server"/>
    </bean>

    <bean id="igniteKeyStorePath" factory-bean="sslConfig" factory-method="getJavaKeyStorePath" />
    <bean id="igniteTrustStorePath" factory-bean="sslConfig" factory-method="getJavaTrustStorePath" />

    <bean id="igniteKeyStorePassword" class="com.raytheon.uf.common.datastore.ignite.IgnitePasswordUtils"
        factory-method="getIgniteKeyStorePassword" />
    <bean id="igniteTrustStorePassword" class="com.raytheon.uf.common.datastore.ignite.IgnitePasswordUtils"
        factory-method="getIgniteTrustStorePassword" />

    <!-- Determine cluster-specific ignite config values -->

    <bean id="dataRegionConfigurations" class="com.raytheon.uf.ignite.core.IgniteServerUtils" factory-method="addToListIfClusterIndexMatches">
        <constructor-arg value="1" />
        <constructor-arg>
            <list></list>
        </constructor-arg>
        <constructor-arg>
            <list>
                <!-- The data-store-cache-name-map gets a dedicated
                     region so entries are never purged.
                -->
                <bean class="org.apache.ignite.configuration.DataRegionConfiguration">
                    <property name="name" value="data-store-cache-name-region"/>
                     <!-- Documented min size is 10MB but I was still
                          getting OutOfMemory so max is slightly larger.
                    -->
                    <property name="initialSize" value="#{10 * 1024 * 1024}"/>
                    <property name="maxSize" value="#{32 * 1024 * 1024}"/>
                    <property name="emptyPagesPoolSize" value="1" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="cacheConfiguration" class="com.raytheon.uf.ignite.core.IgniteServerUtils" factory-method="addToListIfClusterIndexMatches">
        <constructor-arg value="1" />
        <constructor-arg>
            <list></list>
        </constructor-arg>
        <constructor-arg>
            <list>
                <!-- This has to be set on the server side here so that it's
                     available right away for CachePluginRegistryPersistenceService -->
                <bean class="org.apache.ignite.configuration.CacheConfiguration">
                    <property name="name" value="data-store-cache-name-map" />
                    <property name="dataRegionName" value="data-store-cache-name-region"/>
                    <property name="cacheMode" value="REPLICATED" />
                    <property name="onheapCacheEnabled" value="true"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="serviceConfiguration" class="com.raytheon.uf.ignite.core.IgniteServerUtils" factory-method="addToListIfClusterIndexMatches">
        <constructor-arg value="1" />
        <constructor-arg>
            <list></list>
        </constructor-arg>
        <constructor-arg>
            <list>
                <bean class="org.apache.ignite.services.ServiceConfiguration">
                    <property name="name" value="CachePluginRegistryPersistenceService" />
                    <property name="maxPerNodeCount" value="1" />
                    <property name="service">
                        <bean class="com.raytheon.uf.ignite.core.CachePluginRegistryPersistenceService" />
                    </property>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- End cluster-specific values -->

    <bean id="grid.cfg" class="org.apache.ignite.configuration.IgniteConfiguration" depends-on="propsLoaded">
        <property name="localHost" value="${LOCAL_ADDRESS}"/>
        <property name="failureHandler">
            <bean class="org.apache.ignite.failure.RestartProcessFailureHandler" />
        </property>
        <property name="discoverySpi">
            <bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
                <property name="ipFinder">
                    <bean
                        class="org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder">
                        <property name="addresses"
                            value="#{'${IGNITE_CLUSTER_SERVERS:localhost}'.split(',')}" />
                    </bean>
                </property>
            </bean>
        </property>
        <property name="dataStorageConfiguration">
            <bean
                class="org.apache.ignite.configuration.DataStorageConfiguration">
                <property name="pageSize" value="#{16 * 1024}" />
                <property name="defaultDataRegionConfiguration">
                    <bean
                        class="org.apache.ignite.configuration.DataRegionConfiguration">
                        <property name="persistenceEnabled"
                            value="false" />
                        <property name="maxSize"
                            value="#{${IGNITE_DATA_REGION_MAX_SIZE_GB:2} * 1024L * 1024 * 1024}" />
                        <property name="initialSize"
                            value="#{${IGNITE_DATA_REGION_INITIAL_SIZE_GB:1} * 1024L * 1024 * 1024}" />
                        <property name="pageEvictionMode"
                            value="RANDOM_LRU" />
                        <property name="evictionThreshold"
                            value="0.90" />
                        <property name="emptyPagesPoolSize"
                            value="${IGNITE_DATA_REGION_EMPTY_PAGES_POOL_SIZE:8192}" />
                    </bean>
                </property>
                <property name="dataRegionConfigurations">
                    <ref bean="dataRegionConfigurations" />
                </property>
            </bean>
        </property>
        <property name="gridLogger">
            <bean class="org.apache.ignite.logger.slf4j.Slf4jLogger" />
        </property>
        <property name="cacheConfiguration">
            <ref bean="cacheConfiguration" />
        </property>
        <property name="serviceConfiguration">
            <ref bean="serviceConfiguration" />
        </property>
        <property name="transactionConfiguration">
            <bean class="org.apache.ignite.configuration.TransactionConfiguration">
                <!-- This should help recover from an issue we are seeing where
                     OutOfMemory exceptions are causing stuck partition map
                     exchange that requires a restart. -->
                <property name="txTimeoutOnPartitionMapExchange" value="${IGNITE_TX_TIMEOUT_ON_PARTITION_MAP_EXCHANGE:30000}"/>
                <property name="defaultTxTimeout" value="${IGNITE_DEFAULT_TX_TIMEOUT:120000}"/>
            </bean>
        </property>

        <property name="sslContextFactory">
            <bean class="org.apache.ignite.ssl.SslContextFactory">
                <property name="keyStoreFilePath" ref="igniteKeyStorePath"/>
                <property name="keyStorePassword" ref="igniteKeyStorePassword" />
                <property name="trustStoreFilePath" ref="igniteTrustStorePath"/>
                <property name="trustStorePassword" ref="igniteTrustStorePassword"/>
                <property name="protocol" value="TLSv1.3"/>
            </bean>
        </property>

        <property name="communicationSpi">
            <bean class="org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi">
                <property name="messageQueueLimit" value="1024"/>
                <!-- This causes clients to keep the last x messages up to this
                     threshold per connection in heap memory in case a connection
                     fails to resend the messages. Limiting this will cause more
                     acknowledgements to be sent but also reduce client heap
                     footprint. Default value is 32. -->
                <property name="ackSendThreshold" value="2"/>
                <property name="socketWriteTimeout" value="30000"/>
                <property name="usePairedConnections" value="true"/>
                <property name="connectionsPerNode" value="4"/>
            </bean>
        </property>
    </bean>

    <bean id="appInfo" class="com.raytheon.uf.common.util.app.AppInfo" factory-method="initialize">
        <constructor-arg value="IGNITE"/>
        <constructor-arg>
            <null />
        </constructor-arg>
        <constructor-arg>
            <null />
        </constructor-arg>
    </bean>

    <bean id="httpClientConfigBuilder" class="com.raytheon.uf.common.comm.HttpClientConfigBuilder">
        <property name="socketTimeout" value="330000" />
        <property name="connectionTimeout" value="10000" />
        <property name="maxConnections" value="100" />
    </bean>

    <bean id="httpClientConfig" factory-bean="httpClientConfigBuilder"
        factory-method="build" />

    <bean id="httpClient" class="com.raytheon.uf.common.comm.HttpClient"
        factory-method="configureGlobalInstance">
        <constructor-arg ref="httpClientConfig" />
    </bean>

   <bean id="jmsClientId" class="com.raytheon.uf.common.util.SystemUtil" factory-method="getClientID">
       <constructor-arg value="ignite" />
   </bean>

    <bean id="jmsConnectionInfo"
        class="com.raytheon.uf.common.jms.JMSConnectionInfo">
        <constructor-arg value="${BROKER_HOST}"/>
        <constructor-arg value="${BROKER_PORT}"/>
        <constructor-arg value="${JMS_VIRTUALHOST}"/>
        <constructor-arg value="${BROKER_HTTP}"/>
        <constructor-arg>
            <map>
                <entry key="jms.prefetchPolicy.all" value="0"/>
                <entry key="provider.futureType" value="balanced"/>
                <entry key="jms.clientID" value-ref="jmsClientId"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="qpidUfConnectionFactory" class="com.raytheon.uf.common.jms.qpid.QpidUFConnectionFactory">
       <constructor-arg ref="jmsConnectionInfo"/>
    </bean>

    <bean id="jmsConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
       <constructor-arg ref="qpidUfConnectionFactory"/>
       <!-- The value of 50 is arbitrary. Can be tweaked later based on
            observed frequency of session creation -->
       <property name="sessionCacheSize" value="50"/>
    </bean>

    <bean id="dataStorageAuditerContainer" class="com.raytheon.uf.common.datastorage.audit.DataStorageAuditerContainer" factory-method="getInstance">
        <property name="auditer">
            <bean class="com.raytheon.uf.ignite.core.IgniteDataStorageAuditerProxy">
                <constructor-arg ref="jmsConnectionFactory"/>
            </bean>
        </property>
    </bean>
</beans>
